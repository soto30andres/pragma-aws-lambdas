package model;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import configuration.DynamoDBAdapter;


@DynamoDBTable(tableName = "CLIENTE")
public class Client {
    private static final String CLIENT_TABLE_NAME = "CLIENTE";
    private static final Logger LOG = LogManager.getLogger(Client.class);
    private String id;
    private String nombre;
    private String apellidos;
    private String ciudad;
    private String tipoIdentificacion;
    private String numeroIdentificacion;
    private Date fechaNacimiento;
    private AmazonDynamoDB dbClient;
    DynamoDBMapper mapper;
    
    DynamoDBAdapter db_adapter = new DynamoDBAdapter();

    public Client() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(CLIENT_TABLE_NAME))
            .build();
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.dbClient = this.db_adapter.getClient();
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }
    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBAttribute(attributeName = "nombre")
    public String getNombre() {
        return this.nombre;
    }
    public void setNombre(String nombre) {
    	this.nombre = nombre;
    }

    @DynamoDBAttribute(attributeName = "apellidos")
    public String getApellidos() {
        return this.apellidos;
    }
    
    public void setApellidos(String apellidos) {
        this.apellidos = apellidos;
    }
    
    @DynamoDBAttribute(attributeName = "ciudad")
    public String getCiudad() {
        return this.ciudad;
    }
    
    public void setCiudad(String ciudad) {
        this.ciudad = ciudad;
    }

    @DynamoDBAttribute(attributeName = "tipo_identificacion")
    public String getTipoIdentificacion() {
		return tipoIdentificacion;
	}

	public void setTipoIdentificacion(String tipoIdentificacion) {
		this.tipoIdentificacion = tipoIdentificacion;
	}
	
    @DynamoDBAttribute(attributeName = "numero_identificacion")
	public String getNumeroIdentificacion() {
		return numeroIdentificacion;
	}

	public void setNumeroIdentificacion(String numeroIdentificacion) {
		this.numeroIdentificacion = numeroIdentificacion;
	}
	
	@DynamoDBAttribute(attributeName = "fecha_nacimiento")
	public Date getFechaNacimiento() {
		return fechaNacimiento;
	}

	public void setFechaNacimiento(Date fechaNacimiento) {
		this.fechaNacimiento = fechaNacimiento;
	}

	public List<Client> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Client> results = this.mapper.scan(Client.class, scanExp);
        
        return results;
	}
	
	public List<Client> listByIdentificationTypeAndIdentificationNumber(Map<String, AttributeValue> filters) throws IOException {
        
        DynamoDBScanExpression scanExpression = new DynamoDBScanExpression()
                .withFilterExpression("tipo_identificacion = :it and numero_identificacion = :in")
                .withExpressionAttributeValues(filters);
        
        List<Client> results = this.mapper.scan(Client.class, scanExpression);
        
        return results;
	}
	
	public List<Client> listByAgeOlderThan(Map<String, AttributeValue> filters) throws IOException {
        
		
        DynamoDBScanExpression scanExpression = new DynamoDBScanExpression()
                .withFilterExpression("fecha_nacimiento <= :dt")
                .withExpressionAttributeValues(filters);
        
        List<Client> results = this.mapper.scan(Client.class, scanExpression);
        
        return results;
	}
    
	public void save(Client client) throws IOException {
        LOG.info("Client - save(): " + client.toString());
        this.mapper.save(client);
    }
	

	public void update(Client client) throws IOException {

		this.mapper.save(client);
    }
	
	public boolean delete(String id) throws IOException {
		Client client = get(id);
	    boolean deleted = false;
	    if (client != null) {
	      this.mapper.delete(client);
	      deleted = true;
	    } 
	    return deleted;
    }
	
	public Client get(String id) throws IOException {
	    Client product = null;

	    HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
	    av.put(":v1", new AttributeValue().withS(id));

	    DynamoDBQueryExpression<Client> queryExp = new DynamoDBQueryExpression<Client>()
	        .withKeyConditionExpression("id = :v1")
	        .withExpressionAttributeValues(av);

	    PaginatedQueryList<Client> result = this.mapper.query(Client.class, queryExp);
	    if (result.size() > 0) {
	      product = result.get(0);
	    }
	    return product;
	}
	
	@Override
	public String toString() {
		return "Client [id=" + id + ", nombre=" + nombre + ", apellidos=" + apellidos + "]";
	}
}